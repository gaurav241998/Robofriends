{"version":3,"sources":["registerServiceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onsearchchange","event","setState","searchfield","target","value","fetch","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2d9888b8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({name,email,id}) =>\r\n{\r\n  return (\r\n      <div className = \"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n          <img alt = \"robots\" src = {`https://robohash.org/${id}?200x200`}/>\r\n          <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n          </div>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>\r\n{\r\n    return (\r\n        <div>\r\n          { robots.map((user,i) =>\r\n     {\r\n        return (<Card key = {i}\r\n         id = {robots[i].id} \r\n         name = {robots[i].name} \r\n         email = {robots[i].email}/>);\r\n     }\r\n          )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchchange}) =>\r\n{\r\n    return (\r\n        <div className = \"pa2\">\r\n            <input \r\n            className = \"pa3 ba b--green bg-lightest-blue\" \r\n            type = \"searchbox\" \r\n            placeholder = \"search robot\"\r\n            onChange = {searchchange}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>\r\n{\r\n    return (\r\n        <div style = {{overflow: 'scroll', border: '1px solid black', height: '800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\n\r\n\r\nclass App extends Component \r\n{\r\n    constructor()\r\n        {\r\n            super()\r\n            this.state = \r\n            {\r\n                robots: [],\r\n                searchfield: ''\r\n            }\r\n        }\r\n\r\n    componentDidMount()\r\n    {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> response.json())\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    onsearchchange = (event) =>\r\n    {\r\n      this.setState({searchfield: event.target.value});\r\n    }\r\n    render()\r\n    {\r\n        const {robots,searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot =>\r\n            {\r\n                return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n            }\r\n            );\r\n            return !robots.length ?\r\n                <h1>Loading</h1>:\r\n                  (\r\n                    <div className = \"tc\">\r\n                        <h1 className = \"f1\">Robofriend</h1>\r\n                        <SearchBox searchchange = {this.onsearchchange}/>\r\n                        <Scroll>\r\n                        <CardList robots = {filteredRobots}/>\r\n                        </Scroll>\r\n                    </div>\r\n                );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as registerServiceWorker from './registerServiceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nregisterServiceWorker.register();\n"],"sourceRoot":""}